#include "Bytestream/ReadUtils.h"

namespace Bytestream {
    template <typename T>
    std::enable_if_t<is_uint_v<T>, void>
    ConstByteArrayView::readBits(T &value, std::size_t bitPos,
                                 std::size_t nBits,
                                 Endian sourceEndianness) const {
        std::size_t nBytes = nBytesToHold(nBits);
        std::byte *start = ptrToStartByte(value, nBytes);
        readBitsInto(start, bitPos, nBits, sourceEndianness);
    }

    template <typename T>
    std::enable_if_t<is_uint_v<T>, T>
    ConstByteArrayView::readBits(std::size_t bitPos, std::size_t nBits,
                                 Endian sourceEndianness) const {
        T value;
        readBits(value, bitPos, nBits, sourceEndianness);
        return value;
    }

    /**
     * @brief Read bytes into the target value
     *
     * @tparam T The type of the target value
     * @param value The target value
     * @param bytePos The position (in bytes) of the data in the array
     * @param nBytes The number of bytes to copy
     * @param sourceEndianness The endianness of the source stream
     */
    template <typename T>
    std::enable_if_t<is_uint_v<T>, void>
    ConstByteArrayView::readBytes(T &value, std::size_t bytePos,
                                  std::size_t nBytes,
                                  Endian sourceEndianness) const {
        std::byte *start = ptrToStartByte(value, nBytes);
        readBytesInto(start, bytePos, nBytes, sourceEndianness);
    }

    /**
     * @brief Read bytes into a value of the specified type
     *
     * @tparam T The type of the target value
     * @param bytePos The position (in bytes) of the data in the array
     * @param nBytes The number of bytes to copy
     * @param sourceEndianness The endianness of the source stream
     */
    template <typename T>
    std::enable_if_t<is_uint_v<T>, T>
    ConstByteArrayView::readBytes(std::size_t bytePos, std::size_t nBytes,
                                  Endian sourceEndianness) const {
        T value;
        readBytes(value, bytePos, nBytes, sourceEndianness);
        return value;
    }

    template <std::size_t N>
    std::bitset<N> ConstByteArrayView::readBitset(std::size_t bitPos) {
        typename BitsInfo<N>::uint_t value;
        readBits(value, bitPos, N, Endian::Big);
        return value;
    }
} // namespace Bytestream