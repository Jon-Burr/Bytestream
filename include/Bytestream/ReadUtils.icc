#include <cstring>
#include <stdexcept>
#include <string>

#include "Bytestream/Endian.h"

namespace Bytestream {
    constexpr inline std::byte createLeftMask(std::size_t nBits) noexcept {
        return ~(~std::byte{0} >> nBits);
    }

    constexpr inline std::byte createRightMask(std::size_t nBits) noexcept {
        return ~(~std::byte{0} << nBits);
    }

    template <typename T>
    std::enable_if_t<is_uint_v<T>, std::byte *> ptrToStartByte(
            T &value, std::size_t nBytes, bool zeroUnused) {

        if (nBytes > sizeof(T))
            throw std::out_of_range(std::to_string(nBytes));
        std::size_t nUnused = sizeof(T) - nBytes;
        if constexpr (Endian::Native == Endian::Big) {
            // LSBs are at the right of the number
            if (zeroUnused)
                std::memset(&value, 0, nUnused);
            return reinterpret_cast<std::byte *>(&value) + nUnused;
        } else {
            std::byte *ptr = reinterpret_cast<std::byte *>(&value);
            // LSBs are at the left of the number
            if (zeroUnused)
                std::memset(ptr + nBytes, 0, nUnused);
            return ptr;
        }
    }
} // namespace Bytestream