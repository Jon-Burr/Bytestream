namespace Bytestream {
    template <typename T>
    std::enable_if_t<is_uint_v<T>, T> PackedBlock::get(const std::string &field) const {
        return get<T>(fieldIdx(field));
    }

    template <typename T>
    std::enable_if_t<is_uint_v<T>, T> PackedBlock::get(std::size_t idx) const {
        return m_data.readBits<T>(fieldPosition(idx), fieldSize(idx));
    }

    template <std::size_t N> std::bitset<N> PackedBlock::getBits(const std::string &field) const {
        return getBits<N>(fieldIdx(field));
    }

    template <std::size_t N> std::bitset<N> PackedBlock::getBits(std::size_t idx) const {
        if (N > fieldSize(idx))
            throw std::out_of_range(std::to_string(N));
        return m_data.readBitset<N>(fieldPosition(idx));
    }
} // namespace Bytestream