#include "Bytestream/ReadUtils.h"
#include "Bytestream/Utils.h"

namespace Bytestream {
    template <typename T>
    std::enable_if_t<is_uint_v<T>, Reader>
    makeReader(T &value, std::size_t nBits, std::endian sourceEndianness) {
        return Reader(ptrToStartByte(value, nBytesToHold(nBits)), nBits,
                      sourceEndianness);
    }

    template <typename T>
    std::enable_if_t<is_uint_v<T>, Reader>
    makeReader(T &value, std::endian sourceEndianness) {
        return Reader(&value, sizeof(T) * CHAR_BIT, sourceEndianness);
    }

    template <typename T>
    UIntHandle<T>::UIntHandle(std::size_t nBits, std::endian sourceEndianness)
            : Reader(&m_value, nBits, sourceEndianness) {}

    template <typename F, typename T>
    FloatHandle<F, T>::FloatHandle(F conversion, std::size_t nBits,
                                   std::endian sourceEndianness)
            : Reader(&m_value, nBits, sourceEndianness),
              m_conversion(conversion) {}
} // namespace Bytestream